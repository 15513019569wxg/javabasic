package day03;

/**
	运算符之五：位运算符 （了解）

	结论：
	1. 位运算符操作的都是整型的数据
	2. << ：在一定范围内，每向左移1位，相当于 * 2
	   >> :在一定范围内，每向右移1位，相当于 / 2

	面试题：最高效方式的计算2 * 8 ？  2 << 3  或 8 << 1
*/
class BitTest {
	public static void main(String[] args) {
		int i = 21;
		i = -21;
		System.out.println("i << 2 :" + (i << 2));
		System.out.println("i << 3 :" + (i << 3));
		System.out.println("i << 27 :" + (i << 27));
		// 00000000 0000000 00000000 00001100
		int m = 12;
		// 00000000 0000000 00000000 00000101
		int n = 5;
		/*
			按位与操作 0&0=0; 0&1=0; 1&0=0; 1&1=1
			“与运算”的特殊用途：
			（1）清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。
			（2）取一个数中指定位
			 方法：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。
				例：设X=10101110，
				取X的低4位，用 X & 0000 1111 = 0000 1110 即可得到；
				还可用来取X的2、4、6位。
		 */
		System.out.println("m & n :" + (m & n));
		/*
			运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1； 即 ：参加运算的两个对象只要有一个为1，其值为1。
			“或运算”特殊作用：
				常用来对一个数据的某些位置1。
				方法：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。
				例：将X=10100000的低4位置1 ，用 X | 0000 1111 = 1010 1111即可得到。
		 */
		System.out.println("m | n :" + (m | n));
		/*
			运算规则：0^0=0； 0^1=1； 1^0=1； 1^1=0；即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。
			“异或运算”的特殊作用：
				（1）使特定位翻转 找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。
				 例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。
				（2）与0相异或，保留原值 ，X ^ 0000 0000 = 1010 1110。
				（3）交换a和b

		 */
		System.out.println("m ^ n :" + (m ^ n));

		//练习：交换两个变量的值
		int num1 = 10;
		int num2 = 20;
		System.out.println("num1 = " + num1 + ",num2 = " + num2);

		//方式一：定义临时变量的方式
		//推荐的方式
		int temp = num1;
		num1 = num2;
		num2 = temp;

		//方式二：好处：不用定义临时变量  
		//弊端：① 相加操作可能超出存储范围 ② 有局限性：只能适用于数值类型
		//num1 = num1 + num2;
		//num2 = num1 - num2;
		//num1 = num1 - num2;

		//方式三：使用位运算符
		//有局限性：只能适用于数值类型
		//num1 = num1 ^ num2;
		//num2 = num1 ^ num2;
		//num1 = num1 ^ num2;

		System.out.println("num1 = " + num1 + ",num2 = " + num2);

	}
}
